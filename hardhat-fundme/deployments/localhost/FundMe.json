{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcd5b6d01c47c3464ffccee193c925fa2da60b8bf1a6864e977b6fb71632413e6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1159110",
    "logsBloom": "0x
    "blockHash": "0xcd1faf7422ee7d4efda8b3f1281178ca433ad1343f93d52fa3f5a354a2f1c467",
    "transactionHash": "0xcd5b6d01c47c3464ffccee193c925fa2da60b8bf1a6864e977b6fb71632413e6",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1159110",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "bf0624ddd316ef42f866e4a24e83f523",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract allows people to fund collective good - any blokcchain native token into this contract\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n// Pragma - version of solidity\\npragma solidity 0.8.8;\\n\\n// Imports\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error Codes\\n// From solidity ^0.8.4 => use a separate error function and call this\\n// error FundMe__NotOwner();\\n\\n// Interfaces\\n// Libraries\\n// Contracts\\n\\n// Functionalitites:\\n// Get Funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n// Allows people to fund collective good - any blokcchain native token into this contract\\n// Deploy to testnet\\n// Chainlink price feeds\\n// Set a minimum funding value in USD\\n\\n// transaction has\\n// nonce, gas price, gas limit, data, value, v,r,s, to\\n\\n// original - tx cost - 771495 | exec cost - 670325\\n// with constant - 751569 | 650427\\n// with immutable -\\n\\n/** @title A contract for crowd funding\\n * @dev This contract allows people to fund collective good - any blokcchain native token into this contract\\n */\\n\\ncontract FundMe {\\n    // Type declaration\\n    // State variables\\n    // Events\\n    // Errors\\n    // Modifiers\\n    // Functions\\n    // - Constructor\\n    // - Receive\\n    // - Fallback\\n    // - External\\n    // - Public\\n    // - Internal\\n    // - Private\\n\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 2 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    // calling this without constant - 2402\\n    // calling this with constant - 303\\n    // Deployer becomes the i_owner + Modifier - onlyi_owner\\n    // without immutable - 751569 | 650427 | 2552\\n    // with - overall - 728393 | 627917 | 417\\n\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        // if (msg.sender != i_owner) {revert FundMe__NotOwner();};  // saves a lot of gas\\n        _;\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        // Want to be able to set a minimum fund amount in USD\\n        // 1. How do we send ETH to this\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Did not send enough\\\"\\n        );\\n        // require(getConversionRate(msg.value) >= minimumUsd, \\\"Did not send enough\\\");  // 1e18 == 1 * 10 ** 18 == 1 eth\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        /* starting index, ending index as condition, step amount*/\\n        // reset the balance of all funder addresses to 0 in mapping\\n        // withdraw funds\\n        // require(msg.sender == i_owner, \\\"Sender is not i_owner\\\");   // converting this to modifier\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // reset the array\\n        s_funders = new address[](0);\\n        // Methods to send money from contract - transfer, send, call\\n        // transfer - convert msg.sender into payable address type | if fails, throws error and reverts\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // send - if fails, returns a boolean\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send Failed\\\");\\n\\n        // call - lower level command - call virtually any function without knowing ABI |\\n        // Recommended way to send & receive ethereum and blockchain native token\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return s_funders;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x573d506b80e72868f7a9e91135a2f1d731b433138cc51cb90de9f657354c8c46\",\"license\":\"LGPL-3.0-only\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getprice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Interacting with a contract outside this project\\n        // Need address of contract and ABI\\n        // Goerli - Eth / USD - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // (uint80 roundId, int256 price, uint startedAt, uint timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\\n        // price here is Eth in terms of USD has 8 decimal places - 3000.00000000\\n        // Eth in terms of  wei has 18 decimal places => both need to match up\\n        // Multiple Eth / USD by 1 * 10 ** 10 to make it have 18 decimal places\\n\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10); // 1 * 10 ** 10\\n    }\\n\\n    function getVersion() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getprice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x4b96e62750b7263df1077ad9b77735489a0a54aeeeba09a710006877390d6d3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200151938038062001519833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61139a6200017f60003960008181610379015281816105d00152610620015261139a6000f3fe60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd1461014d578063b60d428814610178578063be2693f014610182578063d7b4750c1461018c578063ea63a044146101c957610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100f7578063893d20e81461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b86565b61032e565b6040516100d79190610bcc565b60405180910390f35b3480156100ec57600080fd5b506100f5610377565b005b34801561010357600080fd5b5061010c6105c0565b6040516101199190610bcc565b60405180910390f35b34801561012e57600080fd5b506101376105cc565b6040516101449190610bf6565b60405180910390f35b34801561015957600080fd5b506101626105f4565b60405161016f9190610c70565b60405180910390f35b6101806101f4565b005b61018a61061e565b005b34801561019857600080fd5b506101b360048036038101906101ae9190610cb7565b6108cb565b6040516101c09190610bf6565b60405180910390f35b3480156101d557600080fd5b506101de610912565b6040516101eb9190610da2565b60405180910390f35b671bc16d674ec80000610232600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109a090919063ffffffff16565b1015610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610e21565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103259190610e70565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc90610f12565b60405180910390fd5b60005b6000805490508110156104b057600080828154811061042a57610429610f32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a890610f61565b915050610408565b50600067ffffffffffffffff8111156104cc576104cb610faa565b5b6040519080825280602002602001820160405280156104fa5781602001602082028036833780820191505090505b5060009080519060200190610510929190610a7c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105379061100a565b60006040518083038185875af1925050503d8060008114610574576040519150601f19603f3d011682016040523d82523d6000602084013e610579565b606091505b50509050806105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b49061106b565b60405180910390fd5b50565b671bc16d674ec8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a390610f12565b60405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561072f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e5575b5050505050905060005b81518110156107ba57600082828151811061075757610756610f32565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b290610f61565b915050610739565b50600067ffffffffffffffff8111156107d6576107d5610faa565b5b6040519080825280602002602001820160405280156108045781602001602082028036833780820191505090505b506000908051906020019061081a929190610a7c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108419061100a565b60006040518083038185875af1925050503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b50509050806108c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108be9061106b565b60405180910390fd5b5050565b60008082815481106108e0576108df610f32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600080548060200260200160405190810160405280929190818152602001828054801561099657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161094c575b5050505050905090565b6000806109ac836109dc565b90506000670de0b6b3a764000085836109c5919061108b565b6109cf9190611114565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d91906111d2565b5050509150506402540be40081610a74919061124d565b915050919050565b828054828255906000526020600020908101928215610af5579160200282015b82811115610af45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a9c565b5b509050610b029190610b06565b5090565b5b80821115610b1f576000816000905550600101610b07565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5382610b28565b9050919050565b610b6381610b48565b8114610b6e57600080fd5b50565b600081359050610b8081610b5a565b92915050565b600060208284031215610b9c57610b9b610b23565b5b6000610baa84828501610b71565b91505092915050565b6000819050919050565b610bc681610bb3565b82525050565b6000602082019050610be16000830184610bbd565b92915050565b610bf081610b48565b82525050565b6000602082019050610c0b6000830184610be7565b92915050565b6000819050919050565b6000610c36610c31610c2c84610b28565b610c11565b610b28565b9050919050565b6000610c4882610c1b565b9050919050565b6000610c5a82610c3d565b9050919050565b610c6a81610c4f565b82525050565b6000602082019050610c856000830184610c61565b92915050565b610c9481610bb3565b8114610c9f57600080fd5b50565b600081359050610cb181610c8b565b92915050565b600060208284031215610ccd57610ccc610b23565b5b6000610cdb84828501610ca2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d1981610b48565b82525050565b6000610d2b8383610d10565b60208301905092915050565b6000602082019050919050565b6000610d4f82610ce4565b610d598185610cef565b9350610d6483610d00565b8060005b83811015610d95578151610d7c8882610d1f565b9750610d8783610d37565b925050600181019050610d68565b5085935050505092915050565b60006020820190508181036000830152610dbc8184610d44565b905092915050565b600082825260208201905092915050565b7f446964206e6f742073656e6420656e6f75676800000000000000000000000000600082015250565b6000610e0b601383610dc4565b9150610e1682610dd5565b602082019050919050565b60006020820190508181036000830152610e3a81610dfe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e7b82610bb3565b9150610e8683610bb3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ebb57610eba610e41565b5b828201905092915050565b7f53656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b6000610efc601383610dc4565b9150610f0782610ec6565b602082019050919050565b60006020820190508181036000830152610f2b81610eef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610f6c82610bb3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9f57610f9e610e41565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ff4600083610fd9565b9150610fff82610fe4565b600082019050919050565b600061101582610fe7565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000611055600b83610dc4565b91506110608261101f565b602082019050919050565b6000602082019050818103600083015261108481611048565b9050919050565b600061109682610bb3565b91506110a183610bb3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110da576110d9610e41565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061111f82610bb3565b915061112a83610bb3565b92508261113a576111396110e5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61116481611145565b811461116f57600080fd5b50565b6000815190506111818161115b565b92915050565b6000819050919050565b61119a81611187565b81146111a557600080fd5b50565b6000815190506111b781611191565b92915050565b6000815190506111cc81610c8b565b92915050565b600080600080600060a086880312156111ee576111ed610b23565b5b60006111fc88828901611172565b955050602061120d888289016111a8565b945050604061121e888289016111bd565b935050606061122f888289016111bd565b925050608061124088828901611172565b9150509295509295909350565b600061125882611187565b915061126383611187565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156112a2576112a1610e41565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156112df576112de610e41565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561131c5761131b610e41565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561135957611358610e41565b5b82820290509291505056fea2646970667358221220496cf70058eefee869d0f813a1c28352115ec8976869f85e3c6a4bb1d0ea814e64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd1461014d578063b60d428814610178578063be2693f014610182578063d7b4750c1461018c578063ea63a044146101c957610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100f7578063893d20e81461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b86565b61032e565b6040516100d79190610bcc565b60405180910390f35b3480156100ec57600080fd5b506100f5610377565b005b34801561010357600080fd5b5061010c6105c0565b6040516101199190610bcc565b60405180910390f35b34801561012e57600080fd5b506101376105cc565b6040516101449190610bf6565b60405180910390f35b34801561015957600080fd5b506101626105f4565b60405161016f9190610c70565b60405180910390f35b6101806101f4565b005b61018a61061e565b005b34801561019857600080fd5b506101b360048036038101906101ae9190610cb7565b6108cb565b6040516101c09190610bf6565b60405180910390f35b3480156101d557600080fd5b506101de610912565b6040516101eb9190610da2565b60405180910390f35b671bc16d674ec80000610232600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109a090919063ffffffff16565b1015610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610e21565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103259190610e70565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fc90610f12565b60405180910390fd5b60005b6000805490508110156104b057600080828154811061042a57610429610f32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a890610f61565b915050610408565b50600067ffffffffffffffff8111156104cc576104cb610faa565b5b6040519080825280602002602001820160405280156104fa5781602001602082028036833780820191505090505b5060009080519060200190610510929190610a7c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105379061100a565b60006040518083038185875af1925050503d8060008114610574576040519150601f19603f3d011682016040523d82523d6000602084013e610579565b606091505b50509050806105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b49061106b565b60405180910390fd5b50565b671bc16d674ec8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a390610f12565b60405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561072f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e5575b5050505050905060005b81518110156107ba57600082828151811061075757610756610f32565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b290610f61565b915050610739565b50600067ffffffffffffffff8111156107d6576107d5610faa565b5b6040519080825280602002602001820160405280156108045781602001602082028036833780820191505090505b506000908051906020019061081a929190610a7c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108419061100a565b60006040518083038185875af1925050503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b50509050806108c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108be9061106b565b60405180910390fd5b5050565b60008082815481106108e0576108df610f32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600080548060200260200160405190810160405280929190818152602001828054801561099657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161094c575b5050505050905090565b6000806109ac836109dc565b90506000670de0b6b3a764000085836109c5919061108b565b6109cf9190611114565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d91906111d2565b5050509150506402540be40081610a74919061124d565b915050919050565b828054828255906000526020600020908101928215610af5579160200282015b82811115610af45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a9c565b5b509050610b029190610b06565b5090565b5b80821115610b1f576000816000905550600101610b07565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5382610b28565b9050919050565b610b6381610b48565b8114610b6e57600080fd5b50565b600081359050610b8081610b5a565b92915050565b600060208284031215610b9c57610b9b610b23565b5b6000610baa84828501610b71565b91505092915050565b6000819050919050565b610bc681610bb3565b82525050565b6000602082019050610be16000830184610bbd565b92915050565b610bf081610b48565b82525050565b6000602082019050610c0b6000830184610be7565b92915050565b6000819050919050565b6000610c36610c31610c2c84610b28565b610c11565b610b28565b9050919050565b6000610c4882610c1b565b9050919050565b6000610c5a82610c3d565b9050919050565b610c6a81610c4f565b82525050565b6000602082019050610c856000830184610c61565b92915050565b610c9481610bb3565b8114610c9f57600080fd5b50565b600081359050610cb181610c8b565b92915050565b600060208284031215610ccd57610ccc610b23565b5b6000610cdb84828501610ca2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d1981610b48565b82525050565b6000610d2b8383610d10565b60208301905092915050565b6000602082019050919050565b6000610d4f82610ce4565b610d598185610cef565b9350610d6483610d00565b8060005b83811015610d95578151610d7c8882610d1f565b9750610d8783610d37565b925050600181019050610d68565b5085935050505092915050565b60006020820190508181036000830152610dbc8184610d44565b905092915050565b600082825260208201905092915050565b7f446964206e6f742073656e6420656e6f75676800000000000000000000000000600082015250565b6000610e0b601383610dc4565b9150610e1682610dd5565b602082019050919050565b60006020820190508181036000830152610e3a81610dfe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e7b82610bb3565b9150610e8683610bb3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ebb57610eba610e41565b5b828201905092915050565b7f53656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b6000610efc601383610dc4565b9150610f0782610ec6565b602082019050919050565b60006020820190508181036000830152610f2b81610eef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610f6c82610bb3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9f57610f9e610e41565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ff4600083610fd9565b9150610fff82610fe4565b600082019050919050565b600061101582610fe7565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000611055600b83610dc4565b91506110608261101f565b602082019050919050565b6000602082019050818103600083015261108481611048565b9050919050565b600061109682610bb3565b91506110a183610bb3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110da576110d9610e41565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061111f82610bb3565b915061112a83610bb3565b92508261113a576111396110e5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61116481611145565b811461116f57600080fd5b50565b6000815190506111818161115b565b92915050565b6000819050919050565b61119a81611187565b81146111a557600080fd5b50565b6000815190506111b781611191565b92915050565b6000815190506111cc81610c8b565b92915050565b600080600080600060a086880312156111ee576111ed610b23565b5b60006111fc88828901611172565b955050602061120d888289016111a8565b945050604061121e888289016111bd565b935050606061122f888289016111bd565b925050608061124088828901611172565b9150509295509295909350565b600061125882611187565b915061126383611187565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156112a2576112a1610e41565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156112df576112de610e41565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561131c5761131b610e41565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561135957611358610e41565b5b82820290509291505056fea2646970667358221220496cf70058eefee869d0f813a1c28352115ec8976869f85e3c6a4bb1d0ea814e64736f6c63430008080033",
  "devdoc": {
    "details": "This contract allows people to fund collective good - any blokcchain native token into this contract",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}